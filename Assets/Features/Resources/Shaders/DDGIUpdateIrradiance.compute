#pragma kernel DDGIUpdateIrradiance
#pragma use_dxc

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
#include "Lib/DDGIInputs.hlsl"
#include "Lib/DDGIProbeIndexing.hlsl"
#include "Lib/DDGIFuncs.hlsl"

RWTexture2DArray<float> _ProbeVariability;

#define CACHE_SIZE PROBE_IRRADIANCE_TEXELS * PROBE_IRRADIANCE_TEXELS
groupshared float3 RadianceCache[CACHE_SIZE];
groupshared float3 DirectionCache[CACHE_SIZE];

static const uint BORDER_TEXELS = PROBE_IRRADIANCE_TEXELS * 4 + 4;
static const uint4 BORDER_OFFSETS[BORDER_TEXELS] = 
{
    uint4(6, 6, 0, 0), 
    uint4(6, 1, 1, 0), uint4(5, 1, 2, 0), uint4(4, 1, 3, 0), uint4(3, 1, 4, 0), uint4(2, 1, 5, 0), uint4(1, 1, 6, 0),
    uint4(1, 6, 7, 0),
    uint4(1, 6, 0, 1), uint4(1, 5, 0, 2), uint4(1, 4, 0, 3), uint4(1, 3, 0, 4), uint4(1, 2, 0, 5), uint4(1, 1, 0, 6),
    uint4(6, 1, 0, 7),
    uint4(6, 6, 7, 1), uint4(6, 5, 7, 2), uint4(6, 4, 7, 3), uint4(6, 3, 7, 4), uint4(6, 2, 7, 5), uint4(6, 1, 7, 6),
    uint4(1, 1, 7, 7),
    uint4(6, 6, 1, 7), uint4(5, 6, 2, 7), uint4(4, 6, 3, 7), uint4(3, 6, 4, 7), uint4(2, 6, 5, 7), uint4(1, 6, 6, 7) 
};

// Thread group count: (num_probe_x, num_probe_z, num_probe_y)
// Each thread group represents a single probe, and each thread within the group processes a texel in the probe’s octahedral projection.
// Each thread retrieves irradiance data from the RayBuffer generated in the DDGI Ray Trace stage, computes global illumination,
// blends it with the previous frame’s irradiance data, and stores the result into the corresponding texel.
[numthreads(PROBE_IRRADIANCE_TEXELS, PROBE_IRRADIANCE_TEXELS, 1)]
void DDGIUpdateIrradiance(
    uint3 GroupId : SV_GroupID,
    uint3 GroupThreadId : SV_GroupThreadID,
    uint3 DispatchThreadId : SV_DispatchThreadID,
    uint GroupIndex : SV_GroupIndex)
{
    // Note: The DDGIGetProbeIndex function we use here takes the probe's grid coordinates as input,
    // but our dispatched thread groups have already been reversed, so we need to reverse them back.
    uint probeIndex = DDGIGetProbeIndex(GroupId.xzy);
    uint3 cornerTexelLocation = DDGIGetProbeBaseTexelCoords(probeIndex, PROBE_IRRADIANCE_TEXELS);
    uint3 baseTexelLocation = cornerTexelLocation + uint3(1, 1, 0);
    uint3 texelLocation = baseTexelLocation + uint3(GroupThreadId.xy, 0);

    // Skip the update phase if the probe is inactive.
    // Note: Unity's default ShaderLab does not support using varying data inside if statements in compute shaders.
    // Here, we use dxc for compilation.
    const uint3 probeDataCoords = DDGIGetProbeTexelCoordsOneByOne(probeIndex);
    const int probeState = DDGILoadProbeState(probeDataCoords);
    if (probeState == DDGI_PROBE_STATE_INACTIVE)
    {
        _ProbeVariability[DispatchThreadId].r = 0.0f;
        return;
    }

    float3 prevRadiance = LOAD_TEXTURE2D_ARRAY_LOD(_ProbeIrradianceHistory, texelLocation.xy, texelLocation.z, 0).rgb;

    float3 probeDirection = DecodeNormalOctahedron(((GroupThreadId.xy + 0.5f) / (float) PROBE_IRRADIANCE_TEXELS) * 2 - 1);

    // The NVIDIA SDK stores ray data in Shared Memory, but in practice, our ray count is adjustable.
    // However, the size of Shared Memory must be determined at compile time.
    // If the application changes the ray budget, the shader must be recompiled, which is inconvenient.
    // Due to the low-frequency nature of diffuse reflections, the number of texels per probe remains mostly unchanged.
    // Therefore, we set the size of Shared Memory to the total number of texels in a single probe (usually smaller than the number of rays).
    // Once Shared Memory is filled, convolution evaluation is performed immediately, and then the next batch of rays is stored.
    float4 result = float4(0.0f, 0.0f, 0.0f, 0.0f);
    uint remainingRays = _RaysPerProbe;
    uint offset = 0;


    if((DDGI_PROBE_RELOCATION == DDGI_PROBE_RELOCATION_ON) || (DDGI_PROBE_CLASSIFICATION == DDGI_PROBE_CLASSIFICATION_ON))
    {
        remainingRays -= RTXGI_DDGI_NUM_FIXED_RAYS;
        offset        += RTXGI_DDGI_NUM_FIXED_RAYS;
    }

    // ------------------------------
    // Irradiance Evaluation
    // ------------------------------
    while (remainingRays > 0)
    {
        uint numRays = min(CACHE_SIZE, remainingRays);
        if(GroupIndex < numRays)
        {
            RadianceCache[GroupIndex]  = RayBuffer[probeIndex * _MaxRaysPerProbe + offset + GroupIndex].rgb;
            DirectionCache[GroupIndex] = DDGIGetProbeRayDirection(offset + GroupIndex);
        }
        GroupMemoryBarrierWithGroupSync();

        for(uint i = 0; i < numRays; ++i)
        {
            float3 radiance  = RadianceCache[i].rgb;
            float3 direction = DirectionCache[i];
            float  weight    = saturate(dot(probeDirection, direction));
            
            result  += float4(weight * radiance, weight);
        }

        remainingRays -= numRays;
        offset        += numRays;
    }
    
    // -----------------------------
    // Irradiance Post Processing 
    // -----------------------------
    float epsilon = 1e-9f * float(_RaysPerProbe);
    if ((DDGI_PROBE_RELOCATION == DDGI_PROBE_RELOCATION_ON) || (DDGI_PROBE_CLASSIFICATION == DDGI_PROBE_CLASSIFICATION_ON))
    {
        epsilon -= RTXGI_DDGI_NUM_FIXED_RAYS; 
    }
    epsilon *= 1e-9f;
    result.rgb *= 1.0f / max(2.0f * result.a, epsilon);
    
    float hysteresis = _HistoryBlendWeight;
    if(dot(prevRadiance, prevRadiance) == 0) hysteresis = 0.0f;

    // Tone-mapping Gamma Adjustment (probeIrradianceEncodingGamma = 5.0f)
    result.rgb = pow(abs(result.rgb), rcp(5.0f));

    float3 delta = result.rgb - prevRadiance.rgb;

    // Cache the current frame's irradiance evaluation result before temporal blending,
    // to be used in the Probe Variability stage.
    float3 irradianceSample = result.rgb;

    if (Max(prevRadiance.rgb - result.rgb) > 0.2f /* probeIrradianceThreshold */)
    {
        // When lighting changes drastically, reduce the weight of the historical frame accordingly.
        hysteresis = max(0.0f, hysteresis - 0.75f);
    }

    if (Luminance(delta) > 1.0f /* probeBrightnessThreshold */)
    {
        // When lighting changes drastically, clamp the irradiance update appropriately.
        delta *= 0.25f;
    }


    static const float c_threshold = 1.f / 1024.f;
    float3 lerpDelta = (1.f - hysteresis) * delta;
    if (Max(result.rgb) < Max(prevRadiance.rgb))
    {
        lerpDelta = min(max(c_threshold, abs(lerpDelta)), abs(delta)) * sign(lerpDelta);
    }
    result = float4(prevRadiance.rgb + lerpDelta, 1.f);
    
    //result.rgb = lerp(result.rgb, prevRadiance, hysteresis);

    if(DDGI_PROBE_REDUCTION == DDGI_PROBE_REDUCTION_ON)
    {
        // The dispatched threads correspond one-to-one with the Variability Texture.
        const uint3 coordsOneByOne = DDGIGetProbeTexelCoordsOneByOne(probeIndex);
        const uint3 threadCoords = uint3(coordsOneByOne.x * PROBE_IRRADIANCE_TEXELS, coordsOneByOne.y * PROBE_IRRADIANCE_TEXELS, coordsOneByOne.z) + uint3(GroupThreadId.xy, 0);
        
        // Compute irradiance variability.
        float3 irradianceMean = result.rgb;
        float3 irradianceSigma2         = (irradianceSample - prevRadiance) * (irradianceSample - irradianceMean);
        float  luminanceSigma2          = Luminance(irradianceSigma2);
        float  luminanceMean            = Luminance(irradianceMean);
        float  coefficientOfVariation   = (luminanceMean <= c_threshold) ? 0.0f : sqrt(luminanceSigma2) / luminanceMean;

        _ProbeVariability[threadCoords].r = coefficientOfVariation;
    }

    _ProbeIrradiance[texelLocation] = float4(result.rgb, 1);
    
    AllMemoryBarrierWithGroupSync();

    // ------------------------------
    // Irradiance Border Update
    // ------------------------------
    for (uint index = GroupIndex; index < BORDER_TEXELS; index += PROBE_IRRADIANCE_TEXELS * PROBE_IRRADIANCE_TEXELS)
    {
        const uint3 sourceIndex = uint3(cornerTexelLocation + BORDER_OFFSETS[index].xy, cornerTexelLocation.z);
        const uint3 targetIndex = uint3(cornerTexelLocation + BORDER_OFFSETS[index].zw, cornerTexelLocation.z);
        _ProbeIrradiance[targetIndex] = _ProbeIrradiance[sourceIndex];
    }
}