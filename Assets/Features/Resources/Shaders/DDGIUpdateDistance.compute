#pragma kernel DDGIUpdateDistance

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
#include "Lib/DDGIInputs.hlsl"
#include "Lib/DDGIProbeIndexing.hlsl"
#include "Lib/DDGIFuncs.hlsl"

#define CACHE_SIZE PROBE_DISTANCE_TEXELS * PROBE_DISTANCE_TEXELS
groupshared float  DepthCache[CACHE_SIZE];
groupshared float3 DirectionCache[CACHE_SIZE];

static const uint BORDER_TEXELS = PROBE_DISTANCE_TEXELS * 4 + 4;
static const uint4 BORDER_OFFSETS[BORDER_TEXELS] = 
{
    uint4(14, 14, 0, 0), 
    uint4(14, 1, 1, 0), uint4(13, 1, 2, 0), uint4(12, 1, 3, 0), uint4(11, 1, 4, 0), uint4(10, 1, 5, 0), uint4(9, 1, 6, 0), uint4(8, 1, 7, 0), 
    uint4(7, 1, 8, 0), uint4(6, 1, 9, 0), uint4(5, 1, 10, 0), uint4(4, 1, 11, 0), uint4(3, 1, 12, 0), uint4(2, 1, 13, 0), uint4(1, 1, 14, 0),
    uint4(1, 14, 15, 0),
    uint4(1, 14, 0, 1), uint4(1, 13, 0, 2), uint4(1, 12, 0, 3), uint4(1, 11, 0, 4), uint4(1, 10, 0, 5), uint4(1, 9, 0, 6), uint4(1, 8, 0, 7), 
    uint4(1, 7, 0, 8), uint4(1, 6, 0, 9), uint4(1, 5, 0, 10), uint4(1, 4, 0, 11), uint4(1, 3, 0, 12), uint4(1, 2, 0, 13), uint4(1, 1, 0, 14),

    uint4(14, 1, 0, 15), 
    uint4(14, 14, 15, 1), uint4(14, 13, 15, 2), uint4(14, 12, 15, 3), uint4(14, 11, 15, 4), uint4(14, 10, 15, 5), uint4(14, 9, 15, 6), uint4(14, 8, 15, 7), 
    uint4(14, 7, 15, 8), uint4(14, 6, 15, 9), uint4(14, 5, 15, 10), uint4(14, 4, 15, 11), uint4(14, 3, 15, 12), uint4(14, 2, 15, 13), uint4(14, 1, 15, 14),

    uint4(1, 1, 15, 15), 
    uint4(14, 14, 1, 15), uint4(13, 14, 2, 15), uint4(12, 14, 3, 15), uint4(11, 14, 4, 15), uint4(10, 14, 5, 15), uint4(9, 14, 6, 15), uint4(8, 14, 7, 15), 
    uint4(7, 14, 8, 15), uint4(6, 14, 9, 15), uint4(5, 14, 10, 15), uint4(4, 14, 11, 15), uint4(3, 14, 12, 15), uint4(2, 14, 13, 15), uint4(1, 14, 14, 15),
};

[numthreads(PROBE_DISTANCE_TEXELS, PROBE_DISTANCE_TEXELS, 1)]
void DDGIUpdateDistance (
    uint3 GroupId           : SV_GroupID,
    uint3 GroupThreadId     : SV_GroupThreadID,
    uint3 DispatchThreadId  : SV_DispatchThreadID,
    uint  GroupIndex        : SV_GroupIndex)
{
    // 注意这里我们使用的DDGIGetProbeIndex函数接受的输入是Probe的网格坐标，但我们的调度线程组是已经经过反转的，所以需要再次反转回来
    uint  probeIndex          = DDGIGetProbeIndex(GroupId.xzy);
    uint3 cornerTexelLocation = DDGIGetProbeBaseTexelCoords(probeIndex, PROBE_DISTANCE_TEXELS);
    uint3 baseTexelLocation   = cornerTexelLocation + uint3(1, 1, 0);
    uint3 texelLocation       = baseTexelLocation + uint3(GroupThreadId.xy, 0);

    float2 prevDistance = _ProbeDistanceHistory[texelLocation];

    float3 probeDirection = DecodeNormalOctahedron(((GroupThreadId.xy + 0.5f) / (float)PROBE_DISTANCE_TEXELS) * 2 - 1);

    // NVIDIA SDK的Shared Memory存储每一根光线的数据，但是实践中我们的光线数量允许重新调整
    // 然而Shared Memory的大小必须是编译期确定的，如果应用程序调整光线预算，那么必须重新编译Shader，这不方便操作
    // 由于漫反射的低频性质，Probe的Texel数量基本是不改的，因此我们将Shared Memory的大小设置为单个probe的texel总数（通常小于光线数量）
    // Shared Memory读满后，马上进行卷积评估操作，然后再存下一批光线的数据
    float   weightSum       = 0;
    float2  result          = 0;
    uint    remainingRays   = _RaysPerProbe;
    uint    offset          = 0;

    if((DDGI_PROBE_RELOCATION == DDGI_PROBE_RELOCATION_ON) || false)
    {
        remainingRays -= RTXGI_DDGI_NUM_FIXED_RAYS;
        offset        += RTXGI_DDGI_NUM_FIXED_RAYS;
    }

    // ------------------------------
    // Distance Evaluate
    // ------------------------------
    while (remainingRays > 0)
    {
        uint numRays = min(CACHE_SIZE, remainingRays);
        if(GroupIndex < numRays)
        {
            DepthCache[GroupIndex] = RayBuffer[probeIndex * _MaxRaysPerProbe + offset + GroupIndex].a;
            DirectionCache[GroupIndex] = DDGIGetProbeRayDirection(offset + GroupIndex);
        }
        GroupMemoryBarrierWithGroupSync();

        for(uint i = 0; i < numRays; ++i)
        {
            float depth = DepthCache[i];
            depth       = min(abs(depth), length(_ProbeSize) * 1.5f); // Reference: NVIDIA
            
            float3 direction = DirectionCache[i];
            
            float weight = saturate(dot(probeDirection, direction));
            weight       = pow(weight, 64);
            
            weightSum   += weight;
            result      += float2(abs(depth), Pow2(depth)) * weight;
        }
        remainingRays -= numRays;
        offset += numRays;
    }

    // ------------------------------
    // Distance Post Processing
    // ------------------------------
    float epsilon = float(_RaysPerProbe);
    if ((DDGI_PROBE_RELOCATION == DDGI_PROBE_RELOCATION_ON) || false)
    {
       epsilon -= RTXGI_DDGI_NUM_FIXED_RAYS; 
    }
    epsilon *= 1e-9f;
    result.rg *= 1.0f / (2.0f * max(weightSum, epsilon));

    const float currentBlendWeight = saturate(1.0f - _HistoryBlendWeight);
    result = lerp(prevDistance, result, currentBlendWeight);
    
    _ProbeDistance[texelLocation] = result;

    //GroupMemoryBarrierWithGroupSync();
    AllMemoryBarrierWithGroupSync();

    // ------------------------------
    // Distance Border Update
    // ------------------------------
    for (uint index = GroupIndex; index < BORDER_TEXELS; index += PROBE_DISTANCE_TEXELS * PROBE_DISTANCE_TEXELS)
    {
        const uint3 sourceIndex = uint3(cornerTexelLocation + BORDER_OFFSETS[index].xy, cornerTexelLocation.z);
        const uint3 targetIndex = uint3(cornerTexelLocation + BORDER_OFFSETS[index].zw, cornerTexelLocation.z);
        _ProbeDistance[targetIndex] = _ProbeDistance[sourceIndex];
    }
}
