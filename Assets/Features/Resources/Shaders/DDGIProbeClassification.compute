#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
#include "Lib/DDGIInputs.hlsl"
#include "Lib/DDGIProbeIndexing.hlsl"
#include "Lib/DDGIFuncs.hlsl"

#pragma kernel DDGIProbeClassificationCS
#pragma kernel DDGIProbeClassificationResetCS

// Every frame, check if there is any geometry inside the voxel block associated with the probe (by comparing the distance of the probe in all directions with the size of the voxel block).
// If the distance exceeds the size, it means that there is no geometry inside the voxel block.
// In that case, we don't need to update the irradiance data for that part.
// However, if we detect valid geometry, we need to resume the update in the next frame.
[numthreads(32, 1, 1)]
void DDGIProbeClassificationCS (uint3 DispatchThreadID : SV_DispatchThreadID)
{
    const uint probeIndex = DispatchThreadID.x;

    const int numProbes = _ProbeCount.x * _ProbeCount.y * _ProbeCount.z;
    if(probeIndex >= numProbes) return;

    const int numRays = min(_RaysPerProbe, RTXGI_DDGI_NUM_FIXED_RAYS);

    int   rayIndex;
    int   backfaceCount = 0;

    for(rayIndex = 0; rayIndex < RTXGI_DDGI_NUM_FIXED_RAYS; ++rayIndex)
    {
        backfaceCount += (RayBuffer[probeIndex * _MaxRaysPerProbe + rayIndex].a < 0.0f);
    }

    const uint3 outputCoords = DDGIGetProbeTexelCoordsOneByOne(probeIndex);

    // If the probe is likely to hit backfaces (when the ratio of backface hits is high), we can skip updating it.
    if(((float)backfaceCount / (float)RTXGI_DDGI_NUM_FIXED_RAYS) > _ProbeFixedRayBackfaceThreshold)
    {
        float4 rawData           = _ProbeData[outputCoords];
        _ProbeData[outputCoords] = float4(rawData.xyz, DDGI_PROBE_STATE_INACTIVE);
        return;
    }

    const float3 probeWorldPosition = DDGIGetProbeWorldPosition(probeIndex);

    for(rayIndex = 0; rayIndex < RTXGI_DDGI_NUM_FIXED_RAYS; ++rayIndex)
    {
        const float hitDistance = RayBuffer[probeIndex * _MaxRaysPerProbe + rayIndex].a;
        if(hitDistance < 0.0f) continue;

        float3 direction = DDGIGetProbeRayDirection(rayIndex);

        // Get the normals of the three planes closest to the ray direction.
        float3 xNormal = float3(direction.x / max(abs(direction.x), 0.000001f), 0.f, 0.f);
        float3 yNormal = float3(0.f, direction.y / max(abs(direction.y), 0.000001f), 0.f);
        float3 zNormal = float3(0.f, 0.f, direction.z / max(abs(direction.z), 0.000001f));

        // Get the positions of the planes.
        float3 p0x = probeWorldPosition + (_ProbeSize.x * xNormal);
        float3 p0y = probeWorldPosition + (_ProbeSize.y * yNormal);
        float3 p0z = probeWorldPosition + (_ProbeSize.z * zNormal);

        // Get the distances from the ray to each plane.
        float3 distances = 
        {
            dot((p0x - probeWorldPosition), xNormal) / max(dot(direction, xNormal), 0.000001f),
            dot((p0y - probeWorldPosition), yNormal) / max(dot(direction, yNormal), 0.000001f),
            dot((p0z - probeWorldPosition), zNormal) / max(dot(direction, zNormal), 0.000001f)
        };
        
        // If the ray is parallel to a plane, it will never intersect with it, so we assign a large value.
        if (distances.x == 0.f) distances.x = 1e27f;
        if (distances.y == 0.f) distances.y = 1e27f;
        if (distances.z == 0.f) distances.z = 1e27f;

        // Get the closest distance between the ray and the planes.
        float maxDistance = min(distances.x, min(distances.y, distances.z));

        // If the closest intersection point is less than the distance to the voxel plane, it means that the ray's voxel block contains geometry.
        // We need to resume the update for the probe.
        if(hitDistance <= maxDistance)
        {
            float4 rawData           = _ProbeData[outputCoords];
            _ProbeData[outputCoords] = float4(rawData.xyz, DDGI_PROBE_STATE_ACTIVE);
            return;
        }
    }

    // If no valid geometry is detected, no update is needed.
    float4 rawData           = _ProbeData[outputCoords];
    _ProbeData[outputCoords] = float4(rawData.xyz,DDGI_PROBE_STATE_INACTIVE);
}

[numthreads(32, 1, 1)]
void DDGIProbeClassificationResetCS(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    const uint  probeIndex   = DispatchThreadID.x;
    const uint3 outputCoords = DDGIGetProbeTexelCoordsOneByOne(probeIndex);

    float4 rawData           = _ProbeData[outputCoords];
    _ProbeData[outputCoords] = float4(rawData.xyz, DDGI_PROBE_STATE_ACTIVE);
}